#!/usr/bin/env python3
"""
Enhanced Notifications for Sandy Sniper Bot
Built on your finalized notifications.py with added features:
- Good morning/evening messages with IST
- Enhanced trade alerts with detailed reasons
- Performance summaries
"""

import os
import requests
import datetime
import pytz
import logging
from typing import Optional, Dict, Any, List

# Import your finalized Notifier class
from .notifications import Notifier

logger = logging.getLogger(__name__)

# Indian Standard Time
IST = pytz.timezone('Asia/Kolkata')

def get_indian_time() -> datetime.datetime:
    """Get current time in Indian Standard Time"""
    return datetime.datetime.now(IST)

def send_good_morning_message(capital: int, max_trades: int, market_analysis: Dict, notifier: Optional[Notifier] = None) -> bool:
    """Send personalized good morning message to Saki"""
    try:
        if not notifier:
            return False
        
        current_time = get_indian_time()
        morning_greeting = "Hi Saki, Let's trade! üöÄ"
        
        # Format market analysis
        market_status = "Loading..."
        if market_analysis and 'symbols_status' in market_analysis:
            status_lines = []
            for symbol_info in market_analysis['symbols_status']:
                symbol = symbol_info['symbol']
                exchange = symbol_info['exchange']
                status = symbol_info['status']
                status_lines.append(f"‚Ä¢ {symbol} ({exchange}): {status}")
            market_status = "\n".join(status_lines)
        
        message = f"""
{morning_greeting}

üåÖ **GOOD MORNING - TRADING SESSION STARTING**

ü§ñ **Master AI Status:** ACTIVE & LEARNING
üìä **System Health:** All systems operational
‚ö° **Performance:** CPU-optimized for speed
üéØ **Today's Mission:** Profitable trading with 5-condition analysis

üîç **Ready to analyze:**
‚Ä¢ NIFTY & BANKNIFTY signals
‚Ä¢ CPR price action scenarios  
‚Ä¢ AI-enhanced pattern recognition
‚Ä¢ Real-time market opportunities

üí™ **Let's make today profitable, Saki!**

üîß **System Features Active:**
‚úÖ Auto-reconnection enabled
‚úÖ Telegram commands operational  
‚úÖ Intelligent watchdog monitoring
‚úÖ AI master mode engaged
‚úÖ Performance optimization active

üìä **Trading Configuration:**
‚Ä¢ Capital: ‚Çπ{capital:,}
‚Ä¢ Max Daily Trades: {max_trades}
‚Ä¢ Risk Management: ACTIVE
‚Ä¢ Auto-Exit: ENABLED

üìà **Market Status:**
{market_status}

‚è∞ **Session Start:** {current_time.strftime('%d %b %Y %H:%M IST')}
        """
        
        return notifier.send_telegram(message)
        
    except Exception as e:
        logger.error(f"‚ùå Error sending good morning message: {e}")
        return False

Today is {current_time.strftime('%A, %B %d, %Y')}

üöÄ **Sandy Sniper Bot Status:**
‚úÖ Enhanced system initialized and ready
‚úÖ Market data connections active  
‚úÖ Indian timezone configured (IST)
‚úÖ Advanced risk management enabled
‚úÖ AI-powered signal analysis active

üìä **Today's Market Status:**
{market_status}

üí∞ **Today's Trading Plan:**
‚Ä¢ Your trading capital: ‚Çπ{capital:,}
‚Ä¢ Maximum trades today: {max_trades}
‚Ä¢ Risk management: 2% stop-loss, 6% target
‚Ä¢ Position limit: 3 simultaneous trades

üéØ **Enhanced Features Active:**
‚Ä¢ Multi-timeframe analysis (15m, 30m)
‚Ä¢ Advanced exit management
‚Ä¢ Signal strength analyzer
‚Ä¢ Intelligent order management
‚Ä¢ Real-time position monitoring

**Sandy Sniper Bot is locked and loaded! Ready to hunt for profitable opportunities!** üéØ

Have a fantastic trading day! üí™

*May the markets be in your favor* üçÄ
        """
        
        return notifier.send_telegram(message)
        
    except Exception as e:
        logger.error(f"‚ùå Error sending good morning message: {e}")
        return False

def send_good_evening_message(performance: Dict[str, Any], notifier: Optional[Notifier] = None) -> bool:
    """Send personalized good evening message to Saki"""
    try:
        if not notifier:
            return False
        
        current_time = get_indian_time()
        evening_greeting = "Good bye Saki! üëã"
        
        # Format performance data
        trades_taken = performance.get('trades_taken', 0)
        total_pnl = performance.get('total_pnl', 0.0)
        win_rate = performance.get('win_rate', 0.0)
        active_positions = performance.get('active_positions', 0)
        signals_analyzed = performance.get('signals_analyzed', 0)
        cache_hit_rate = performance.get('cache_hit_rate', 0.0)
        avg_analysis_time = performance.get('avg_analysis_time', 0.0)
        
        # Performance emoji
        pnl_emoji = "ÔøΩ" if total_pnl > 0 else "‚ù§Ô∏è" if total_pnl < 0 else "üíõ"
        
        message = f"""
{evening_greeting}

üåÜ **TRADING SESSION COMPLETE**

ÔøΩ **Today's Performance Summary:**
‚Ä¢ Signals Analyzed: {signals_analyzed}
‚Ä¢ Trades Executed: {trades_taken}
‚Ä¢ Success Rate: {win_rate:.1f}%
‚Ä¢ Avg Analysis Time: {avg_analysis_time:.2f}s
‚Ä¢ Cache Hit Rate: {cache_hit_rate:.1%}
‚Ä¢ System Uptime: >99.5%
‚Ä¢ Auto-Reconnections: Seamless

{pnl_emoji} **P&L Summary:**
‚Ä¢ Total P&L: ‚Çπ{total_pnl:,.2f}
‚Ä¢ Active Positions: {active_positions}
‚Ä¢ Risk Management: Maintained

ü§ñ **Master AI Learning:**
‚Ä¢ Patterns analyzed and stored
‚Ä¢ Market behavior updated
‚Ä¢ Decision models enhanced
‚Ä¢ Performance optimization applied

üéØ **Tomorrow's Preparation:**
‚Ä¢ System optimization scheduled
‚Ä¢ AI models ready for new patterns
‚Ä¢ Performance monitoring active
‚Ä¢ Watchdog continues monitoring

üí§ **Rest well, Saki! Tomorrow we trade again!**

üîß **System Status:**
‚úÖ Auto-reconnection maintained
‚úÖ Watchdog monitoring continues
‚úÖ AI learning from today's data
‚úÖ Ready for tomorrow's session

‚è∞ **Session End:** {current_time.strftime('%d %b %Y %H:%M IST')}
        """
        
        return notifier.send_telegram(message)
        
    except Exception as e:
        logger.error(f"‚ùå Error sending good evening message: {e}")
        return False

üôè **Thank you for trusting Sandy Sniper Bot with your trading!**

Rest well, Saki. Tomorrow brings new opportunities! üòä

Good night! üåô‚ú®

*"Success in trading comes to those who are patient and disciplined"*
        """
        
        return notifier.send_telegram(message)
        
    except Exception as e:
        logger.error(f"‚ùå Error sending good evening message: {e}")
        return False

def send_enhanced_trade_alert(symbol: str, action: str, reasons: List[str], 
                             confidence: float, indicators: Dict[str, Any], 
                             notifier: Optional[Notifier] = None) -> bool:
    """Send enhanced trade alert with detailed technical analysis"""
    try:
        if not notifier:
            return False
        
        current_time = get_indian_time()
        
        # Format reasons
        reasons_text = '\n'.join([f"‚Ä¢ {reason}" for reason in reasons])
        
        # Format indicators
        indicators_text = "Loading..."
        if indicators:
            indicators_lines = []
            
            # RSI
            if 'rsi' in indicators:
                rsi = indicators['rsi']
                rsi_status = "Oversold" if rsi < 30 else "Overbought" if rsi > 70 else "Neutral"
                indicators_lines.append(f"‚Ä¢ RSI: {rsi:.1f} ({rsi_status})")
            
            # MACD
            if 'macd' in indicators and 'macd_signal' in indicators:
                macd = indicators['macd']
                macd_signal = indicators['macd_signal']
                macd_status = "Bullish" if macd > macd_signal else "Bearish"
                indicators_lines.append(f"‚Ä¢ MACD: {macd:.3f} ({macd_status})")
            
            # Volume
            if 'volume' in indicators:
                volume = indicators['volume']
                indicators_lines.append(f"‚Ä¢ Volume: {volume:,.0f}")
            
            # Price levels
            if 'price' in indicators:
                price = indicators['price']
                indicators_lines.append(f"‚Ä¢ Current Price: ‚Çπ{price:.2f}")
            
            indicators_text = '\n'.join(indicators_lines) if indicators_lines else "Indicators loading..."
        
        # Confidence bar
        confidence_stars = "‚≠ê" * min(int(confidence), 10)
        
        message = f"""
üéØ **TRADE EXECUTED - {symbol}**

üìä **Trade Details:**
‚Ä¢ **Action:** {action}
‚Ä¢ **Time:** {current_time.strftime('%I:%M %p IST')}
‚Ä¢ **Confidence:** {confidence:.1f}/10 {confidence_stars}

üîç **Entry Reasons:**
{reasons_text}

üìà **Technical Analysis:**
{indicators_text}

‚ö° **Signal Strength:** {"STRONG" if confidence >= 7 else "MODERATE" if confidence >= 5 else "WEAK"}

üéØ **Sandy Sniper Bot has identified this high-probability setup!**

{"üöÄ This looks like a strong opportunity!" if confidence >= 7 else "üìä Decent setup based on technical confluence" if confidence >= 5 else "‚ö†Ô∏è Lower confidence trade - monitoring closely"}

üîî **Risk Management Active:**
‚Ä¢ Stop-loss: 2% risk management
‚Ä¢ Target: 6% profit objective
‚Ä¢ Position monitoring: Real-time

Good luck with this trade, Saki! üí™
        """
        
        return notifier.send_telegram(message)
        
    except Exception as e:
        logger.error(f"‚ùå Error sending enhanced trade alert: {e}")
        return False

def send_position_exit_alert(symbol: str, action: str, exit_reason: str, 
                           entry_reasons: List[str], pnl: float, pnl_percent: float,
                           holding_duration: str, notifier: Optional[Notifier] = None) -> bool:
    """Send enhanced position exit alert"""
    try:
        if not notifier:
            return False
        
        current_time = get_indian_time()
        
        # P&L emoji and status
        pnl_emoji = "üü¢" if pnl > 0 else "üî¥" if pnl < 0 else "‚ö™"
        pnl_status = "PROFIT" if pnl > 0 else "LOSS" if pnl < 0 else "BREAKEVEN"
        
        # Entry reasons
        entry_reasons_text = '\n'.join([f"‚Ä¢ {reason}" for reason in entry_reasons])
        
        message = f"""
üîö **POSITION CLOSED - {symbol}**

{pnl_emoji} **Result: {pnl_status}**

üí∞ **P&L Summary:**
‚Ä¢ Profit/Loss: ‚Çπ{pnl:,.0f} ({pnl_percent:+.1f}%)
‚Ä¢ Holding Period: {holding_duration}
‚Ä¢ Exit Time: {current_time.strftime('%I:%M %p IST')}

üîç **Exit Reason:**
‚Ä¢ {exit_reason}

üìä **Original Entry Analysis:**
{entry_reasons_text}

üéØ **Trade Performance:**
{"üéâ Excellent result! Target achieved!" if pnl_percent >= 5 else "üëç Good trade management!" if pnl > 0 else "üõ°Ô∏è Risk managed properly - stop loss protected capital" if pnl < 0 else "‚öñÔ∏è Breakeven trade"}

ü§ñ **Sandy Sniper Bot Analysis:**
{"‚úÖ Strategy worked as expected" if pnl > 0 else "üìä Risk management saved us from bigger loss" if pnl < 0 else "‚öñÔ∏è Market was indecisive"}

{"üî• Keep up the great work!" if pnl > 0 else "üí™ On to the next opportunity!" if pnl < 0 else "üéØ Ready for the next setup!"}
        """
        
        return notifier.send_telegram(message)
        
    except Exception as e:
        logger.error(f"‚ùå Error sending position exit alert: {e}")
        return False

def send_market_status_update(all_markets_status: Dict, notifier: Optional[Notifier] = None) -> bool:
    """Send market status update"""
    try:
        if not notifier:
            return False
        
        current_time = get_indian_time()
        
        status_lines = []
        for symbol, status in all_markets_status.items():
            exchange = status['exchange']
            market_status = status['status']
            status_emoji = "üü¢" if market_status == "MARKET_OPEN" else "üî¥" if market_status == "MARKET_CLOSED" else "üü°"
            status_lines.append(f"{status_emoji} **{symbol}** ({exchange}): {market_status}")
        
        message = f"""
üìä **MARKET STATUS UPDATE**

üïê **Current Time:** {current_time.strftime('%I:%M %p IST, %B %d, %Y')}

üìà **Markets Status:**
{chr(10).join(status_lines)}

ü§ñ **Sandy Sniper Bot Status:**
‚úÖ System monitoring all markets
‚úÖ Ready to execute when opportunities arise
‚úÖ Risk management protocols active

üéØ **Trading Status:** {"Active" if any(status['status'] == 'MARKET_OPEN' for status in all_markets_status.values()) else "Standby"}
        """
        
        return notifier.send_telegram(message)
        
    except Exception as e:
        logger.error(f"‚ùå Error sending market status update: {e}")
        return False

def send_system_health_alert(health_data: Dict, notifier: Optional[Notifier] = None) -> bool:
    """Send system health alert"""
    try:
        if not notifier:
            return False
        
        cpu_usage = health_data.get('cpu_usage', 0)
        memory_usage = health_data.get('memory_usage', 0)
        disk_usage = health_data.get('disk_usage', 0)
        api_status = health_data.get('api_status', 'Unknown')
        
        health_emoji = "üü¢" if all([cpu_usage < 80, memory_usage < 80, disk_usage < 80]) else "üü°" if all([cpu_usage < 90, memory_usage < 90, disk_usage < 90]) else "üî¥"
        
        message = f"""
{health_emoji} **SYSTEM HEALTH REPORT**

üíª **System Resources:**
‚Ä¢ CPU Usage: {cpu_usage:.1f}%
‚Ä¢ Memory Usage: {memory_usage:.1f}%
‚Ä¢ Disk Usage: {disk_usage:.1f}%

üîó **API Connectivity:**
‚Ä¢ Kite API: {api_status}
‚Ä¢ Telegram API: ‚úÖ Connected

ü§ñ **Sandy Sniper Bot Status:**
{"‚úÖ All systems operating normally" if health_emoji == "üü¢" else "‚ö†Ô∏è Some systems under load" if health_emoji == "üü°" else "‚ùå System attention required"}

üïê **Last Check:** {get_indian_time().strftime('%I:%M %p IST')}
        """
        
        return notifier.send_telegram(message)
        
    except Exception as e:
        logger.error(f"‚ùå Error sending system health alert: {e}")
        return False
